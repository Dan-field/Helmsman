<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-12</depth>
  <persistent>0</persistent>
  <parentName>obj_dynamicParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>COEFF_LIFT = 100;
COEFF_LIFT_PICKUP = 10;
COEFF_DRAG_L = 12;
COEFF_DRAG_T = 80;

// these three values must ascend in order
ANGLE_PICKUP = 11; // angle when sail starts to work
ANGLE_LUFF = 23; // angle when flow becomes laminar
ANGLE_STALL = 60; // must be less than 90

LENGTH_BOOM = 96;
LENGTH_FORCE = 10;

sense = 1;
sense_previous = 1;

luff_img_count = 0;

enum zone {
    luffing,
    pickup,
    laminar,
    stalled,
    running,
    reversed,
    error
    }

sail = zone.luffing;

debug_zone = "Luffing";


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// break wind down into x and y components
wind_x_component = -sin(degtorad(WIND_DIR))*WIND_SPEED;
wind_y_component = cos(degtorad(WIND_DIR))*WIND_SPEED;

// set up variables
var sail_angle_to_wind = angle_difference(phy_rotation, WIND_DIR);
var sail_angle_magnitude = abs(sail_angle_to_wind);
var sail_angle_to_boat = angle_difference(id.phy_rotation, obj_boat.phy_rotation);

// is the thrust to the left or the right?
if (sail_angle_to_wind &gt; 0 &amp;&amp; sail_angle_to_wind &lt; 180) sense = 1;
else if (sail_angle_to_wind &gt; -180 &amp;&amp; sail_angle_to_wind &lt; 0) sense = -1;
else sense = sense_previous; // angle is exactly zero or 180
sense_previous = sense; // ready for the next time-step

// we have six 'sail_zone's: luffing, pickup, laminar, stalled, running, reversed,
// plus 'error' zone if none of those.

// calculate which sail zone we're in
if (sail_angle_magnitude &gt;= 0 &amp;&amp; sail_angle_magnitude &lt; ANGLE_PICKUP){
    sail = zone.luffing;
    debug_zone = "Luffing";
    }
else if (sail_angle_magnitude &lt; ANGLE_LUFF){
    sail = zone.pickup;
    debug_zone = "Pickup";
    }
else if (sail_angle_magnitude &lt; ANGLE_STALL){
    sail = zone.laminar;
    debug_zone = "Laminar";
    }
else if (sail_angle_magnitude &lt; 90){
    sail = zone.stalled;
    debug_zone = "Stalled";
    }
else if (sail_angle_magnitude &lt; (180 - ANGLE_STALL)){
    sail = zone.running;
    debug_zone = "Running";
    }
else if (sail_angle_magnitude &lt;= 180){
    sail = zone.reversed;
    debug_zone = "Reversed";
    }
else {
    sail = zone.error;
    debug_zone = "Error";
    }

// if luffing, apply laminar drag at mast location in wind direction
// and apply a tiny lift force to prevent sail from getting stuck
switch (sail)
{
    case zone.luffing:
        physics_apply_force(id.x, id.y, wind_x_component*COEFF_DRAG_L, wind_y_component*COEFF_DRAG_L);
        physics_apply_local_force(0, LENGTH_FORCE, COEFF_LIFT_PICKUP*WIND_SPEED*sense*0.1, 0);
        break;
// if we're in the pickup zone, apply laminar drag at mast in wind direction
// and apply pickup lift at sail, perpendicular to boom
    case zone.pickup:
        physics_apply_force(id.x, id.y, wind_x_component*COEFF_DRAG_L, wind_y_component*COEFF_DRAG_L);
        physics_apply_local_force(0, LENGTH_FORCE, COEFF_LIFT_PICKUP*WIND_SPEED*sense, 0);
        break;
// if we have laminar flow, apply lift &amp; drag to sail
    case zone.laminar:
        physics_apply_local_force(0, LENGTH_FORCE, COEFF_LIFT*WIND_SPEED*sense, COEFF_DRAG_L*WIND_SPEED);
        break;
// if we have stalled, apply lift &amp; drag to sail (ramping down from full lift to turbulent drag only at 90 degrees)
    case zone.stalled:
        var percent_thru = (sail_angle_magnitude-ANGLE_STALL)/(90-ANGLE_STALL);
        var lift = lerp(COEFF_LIFT, COEFF_DRAG_T, percent_thru);
        var drag = lerp(COEFF_DRAG_L, 0, percent_thru);
        physics_apply_local_force(0, LENGTH_FORCE, lift*WIND_SPEED*sense, drag*WIND_SPEED);
        break;
// if we are running, apply turbulent drag in wind direction
    case zone.running:
        var wind_to_sail_x = sin(degtorad(sail_angle_to_wind));
        var wind_to_sail_y = cos(degtorad(sail_angle_to_wind));
        physics_apply_local_force(0, LENGTH_FORCE, wind_to_sail_x*WIND_SPEED*COEFF_DRAG_T, wind_to_sail_y*WIND_SPEED*COEFF_DRAG_T);
        break;
// if sail is reversed, apply turbulent drag ramping down to laminar drag only at 180 degreees
    case zone.reversed:
        var wind_to_sail_x = sin(degtorad(sail_angle_to_wind));
        var wind_to_sail_y = cos(degtorad(sail_angle_to_wind));
        var push = lerp(COEFF_DRAG_L, COEFF_DRAG_T, (180-sail_angle_magnitude)/ANGLE_STALL);
        physics_apply_local_force(0, LENGTH_FORCE, wind_to_sail_x*WIND_SPEED*push, wind_to_sail_y*WIND_SPEED*push);
        break;
    case zone.error:
        physics_apply_local_force(0, 0, 0, 0);
        break;
}
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(50, 0, "Sail Zone: " + debug_zone );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (sail)
{
    case zone.luffing:
        draw_sprite_ext(spr_sail, luff_img_count+2, id.x, id.y, 1, 1, -id.phy_rotation, c_white, 1);
        if (luff_img_count &lt; 15) luff_img_count +=1;
        else luff_img_count = 0;
        break;
    case zone.pickup:
        if (sense == 1)
        {
            draw_sprite_ext(spr_sail, 19, id.x, id.y, 1, 1, -id.phy_rotation, c_white, 1);
        }
        else if (sense == -1)
        {
            draw_sprite_ext(spr_sail, 18, id.x, id.y, 1, 1, -id.phy_rotation, c_white, 1);
        }

        break;
    case zone.laminar:
        if (sense == 1)
        {
            draw_sprite_ext(spr_sail, 1, id.x, id.y, 1, 1, -id.phy_rotation, c_white, 1);
        }
        else if (sense == -1)
        {
            draw_sprite_ext(spr_sail, 0, id.x, id.y, 1, 1, -id.phy_rotation, c_white, 1);
        }
        break;
    case zone.running:
        if (sense == 1)
        {
            draw_sprite_ext(spr_sail, 21, id.x, id.y, 1, 1, -id.phy_rotation, c_white, 1);
        }
        else if (sense == -1)
        {
            draw_sprite_ext(spr_sail, 20, id.x, id.y, 1, 1, -id.phy_rotation, c_white, 1);
        }
        break;
    case zone.stalled:
        if (sense == 1)
        {
            draw_sprite_ext(spr_sail, 21, id.x, id.y, 1, 1, -id.phy_rotation, c_white, 1);
        }
        else if (sense == -1)
        {
            draw_sprite_ext(spr_sail, 20, id.x, id.y, 1, 1, -id.phy_rotation, c_white, 1);
        }
        break;
    case zone.reversed:
        if (sense == 1)
        {
            draw_sprite_ext(spr_sail, 21, id.x, id.y, 1, 1, -id.phy_rotation, c_white, 1);
        }
        else if (sense == -1)
        {
            draw_sprite_ext(spr_sail, 20, id.x, id.y, 1, 1, -id.phy_rotation, c_white, 1);
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.800000011920929</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.600000023841858</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.899999976158142</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.300000011920929</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
